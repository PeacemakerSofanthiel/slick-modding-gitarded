<?xml version="1.0"?>
<doc>
    <assembly>
        <name>10EnumExtender</name>
    </assembly>
    <members>
        <member name="T:EnumExtenderV2.EnumExtender">
            <summary>
            The static container and version wrapper for optimized enum-processing and enum-extending methods.
            </summary>
        </member>
        <member name="M:EnumExtenderV2.EnumExtender.GetNamesAndValues``1">
            <summary>Retrieves a value-sorted read-only list of name-value pairs in the given enumeration type.</summary>
            <typeparam name="TEnum">An enumeration type.</typeparam>
            <returns>A <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> containing the name-value pairs in <typeparamref name="TEnum"/>, sorted in ascending order by value (according to the default ordering of <typeparamref name="TEnum"/>'s underlying type).</returns>
        </member>
        <member name="M:EnumExtenderV2.EnumExtender.GetNames``1">
            <summary>Retrieves a value-sorted read-only list of names in the given enumeration type.</summary>
            <typeparam name="TEnum">An enumeration type.</typeparam>
            <returns>A <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> containing the names in <typeparamref name="TEnum"/>, sorted in ascending order by the corresponding value (according to the default ordering of <typeparamref name="TEnum"/>'s underlying type).</returns>
        </member>
        <member name="M:EnumExtenderV2.EnumExtender.GetValues``1">
            <summary>Retrieves a sorted read-only list of values in the given enumeration type.</summary>
            <typeparam name="TEnum">An enumeration type.</typeparam>
            <returns>A <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> containing the named values in <typeparamref name="TEnum"/>, sorted in ascending order (according to the default ordering of <typeparamref name="TEnum"/>'s underlying type).</returns>
        </member>
        <member name="M:EnumExtenderV2.EnumExtender.GetOriginalNamesAndValues``1">
            <summary>Retrieves a value-sorted read-only list of name-value pairs that were originally defined in the given enumeration type.</summary>
            <typeparam name="TEnum">An enumeration type.</typeparam>
            <returns>A <see cref="T:System.Collections.Generic.KeyValuePair`2"/> array of the name-value pairs of the original constants in <typeparamref name="TEnum"/>, sorted in ascending order by value (according to the default ordering of <typeparamref name="TEnum"/>'s underlying type).</returns>
        </member>
        <member name="M:EnumExtenderV2.EnumExtender.GetOriginalNames``1">
            <summary>Retrieves a value-sorted array of names that were originally defined in the given enumeration type.</summary>
            <typeparam name="TEnum">An enumeration type.</typeparam>
            <returns>A string array of the names of the original constants in <typeparamref name="TEnum"/>, sorted in ascending order by the corresponding value (according to the default ordering of <typeparamref name="TEnum"/>'s underlying type).</returns>
        </member>
        <member name="M:EnumExtenderV2.EnumExtender.GetOriginalValues``1">
            <summary>Retrieves an array of the values of the constants that were originally defined in a specified enumeration.</summary>
            <typeparam name="TEnum">An enumeration type.</typeparam>
            <returns>A <typeparamref name="TEnum"/> array of the values of the original constants in <typeparamref name="TEnum"/>, sorted in ascending order (according to the default ordering of <typeparamref name="TEnum"/>'s underlying type).</returns>
        </member>
        <member name="M:EnumExtenderV2.EnumExtender.IsOriginalName``1(System.String)">
            <summary>Returns a boolean indicating whether a constant with the given name was originally defined in the given enumeration type.</summary>
            <typeparam name="TEnum">An enumeration type.</typeparam>
            <param name="name">The name of a constant in <typeparamref name="TEnum" />.</param>
            <returns><see langword="true" /> if <paramref name="name"/> is a name of a constant in the original definition of <typeparamref name="TEnum" />; otherwise, <see langword="false" />.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="name" /> is not a valid name for an enumeration constant.</exception>
        </member>
        <member name="M:EnumExtenderV2.EnumExtender.IsOriginalValue``1(``0)">
            <summary>Returns a boolean indicating whether a constant with the given value was originally defined in the given enumeration type.</summary>
            <typeparam name="TEnum">An enumeration type.</typeparam>
            <param name="value">The value of a constant in <typeparamref name="TEnum" />.</param>
            <returns><see langword="true" /> if <paramref name="value"/> is a value of a constant in the original definition of <typeparamref name="TEnum" />; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:EnumExtenderV2.EnumExtender.GetNamesFor``1(``0)">
            <summary>Retrieves all names associated with the given value of the given enumeration type.</summary>
            <typeparam name="TEnum">An enumeration type.</typeparam>
            <param name="value">The value of a constant in <typeparamref name="TEnum" />.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of the <typeparamref name="TEnum"/> names corresponding to <paramref name="value"/>.</returns>
        </member>
        <member name="M:EnumExtenderV2.EnumExtender.TryGetValueOf``1(System.String,``0@)">
            <summary>Converts the name of a constant in the given enumeration type to its value. The return value indicates whether the conversion succeeded.</summary>
            <typeparam name="TEnum">An enumeration type.</typeparam>
            <param name="name">The name of a constant in <typeparamref name="TEnum" />.</param>
            <param name="value">When the method returns <see langword="true"/>, contains the <typeparamref name="TEnum" /> value corresponding to <paramref name="name"/>; otherwise, contains the default value of <typeparamref name="TEnum" />.</param>
            <returns><see langword="true"/> if <paramref name="name"/> has a <typeparamref name="TEnum" /> value corresponding to it; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="name" /> is not a valid name for an enumeration constant.</exception>
        </member>
        <member name="M:EnumExtenderV2.EnumExtender.BinarySearch``1(``0)">
            <summary>Searches the list of named values in the given enumeration type for the first occurrence of the given value or a greater one.</summary>
            <typeparam name="TEnum">An enumeration type.</typeparam>
            <param name="value">The value to search for.</param>
            <returns>If <paramref name="value"/> occurs at least once in the list of the named values of <typeparamref name="TEnum"/> (sorted in ascending order according to the default ordering of <typeparamref name="TEnum"/>'s underlying type), the zero-based index of its first occurrence; otherwise, the bitwise complement of the index of the first occurrence of the smallest named value that is larger than <paramref name="value"/> or, if there is no such value, the bitwise complement of the total number of named values.</returns>
        </member>
        <member name="M:EnumExtenderV2.EnumExtender.TryFindUnnamedValue``1(System.Nullable{``0},System.Nullable{``0},System.Boolean,``0@)">
            <summary>Tries to find the first unnamed <typeparamref name="TEnum"/> value between <paramref name="minBound"/> and <paramref name="maxBound"/>.</summary>
            <typeparam name="TEnum">An enumeration type.</typeparam>
            <param name="minBound">The smallest possible value to search for. If null, defaults to the smallest possible value of <typeparamref name="TEnum"/>'s underlying type (which can be negative - to search for nonnegative values, use default(<typeparamref name="TEnum"/>) !).</param>
            <param name="maxBound">The largest possible value to search for. If null, defaults to the largest possible value of <typeparamref name="TEnum"/>'s underlying type.</param>
            <param name="largest">If set to <see langword="true"/>, search for the largest unnamed value within the specified bounds; otherwise, search for the smallest one.</param>
            <param name="freeValue">When the method returns <see langword="true"/>, contains the first (largest if <paramref name="largest"/> is <see langword="true"/>, and smallest otherwise) unnamed <typeparamref name="TEnum" /> value that is at least <paramref name="minBound"/> (if specified) and at most <paramref name="maxBound"/> (if specified); otherwise, contains the default value of <typeparamref name="TEnum" />.</param>
            <returns><see langword="true"/> if there is an unnamed <typeparamref name="TEnum" /> value that is at least <paramref name="minBound"/> (if specified) and at most <paramref name="maxBound"/> (if specified); otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:EnumExtenderV2.EnumExtender.TryAddName``1(System.String,``0,System.Boolean)">
            <summary>Tries to inject a pair consisting of a given name and a given value into the given enumeration type.</summary>
            <typeparam name="TEnum">An enumeration type.</typeparam>
            <param name="name">The name to be injected.</param>
            <param name="value">The value to be injected.</param>
            <param name="allowMultipleNames">If set to <see langword="true"/>, trying to add a new name to an already named value will succeed; otherwise, it will fail.
            Note that while enumeration values with multiple names are allowed by the compiler and the runtime, they can result in some less than predictable behaviour (such as <see cref="M:System.Enum.ToString"/> arbitrarily returning one of multiple names for the value, depending on the name-value list as a whole). Only set this to <see langword="true"/> if you know what you're doing!</param>
            <returns><see langword="true"/> if the name-value pair was injected successfully; otherwise (if the name was already present, or if the value was already present and <paramref name="allowMultipleNames"/> is <see langword="false"/>), <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="name" /> is not a valid name for an enumeration constant.</exception>
        </member>
        <member name="M:EnumExtenderV2.EnumExtender.IsValidEnumName(System.String)">
            <summary>Returns a boolean indicating whether the given string is a valid name for an enumeration constant.</summary>
            <param name="name">The string to test for validity.</param>
            <returns><see langword="true"/> if <paramref name="name"/> is a valid name for an enumeration constant; otherwise, <see langword="false"/>.</returns>
        </member>
    </members>
</doc>
